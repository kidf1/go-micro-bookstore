// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/author/author.proto

/*
Package go_micro_bookstore_srv_author is a generated protocol buffer package.

It is generated from these files:
	proto/author/author.proto

It has these top-level messages:
	AuthorProfile
	CreateAuthorRequest
	CreateAuthorResponse
	GetAuthorRequest
	GetAuthorResponse
	GetAuthorByIDRequest
	GetAuthorByIDResponse
	UpdateAuthorRequest
	UpdateAuthorResponse
	DeleteAuthorRequest
	DeleteAuthorResponse
	AddAuthorBookRequest
	AddAuthorBookResponse
	GetAuthorBookRequest
	GetAuthorBookResponse
	RemoveAuthorBookRequest
	RemoveAuthorBookResponse
*/
package go_micro_bookstore_srv_author

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/ahmadnurus/go-micro-bookstore/product/srv/proto/product"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Author service

type AuthorService interface {
	CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...client.CallOption) (*CreateAuthorResponse, error)
	GetAuthor(ctx context.Context, in *GetAuthorRequest, opts ...client.CallOption) (*GetAuthorResponse, error)
	GetAuthorByID(ctx context.Context, in *GetAuthorByIDRequest, opts ...client.CallOption) (*GetAuthorByIDResponse, error)
	UpdateAuthor(ctx context.Context, in *UpdateAuthorRequest, opts ...client.CallOption) (*UpdateAuthorResponse, error)
	DeleteAuthor(ctx context.Context, in *DeleteAuthorRequest, opts ...client.CallOption) (*DeleteAuthorResponse, error)
	AddAuthorBook(ctx context.Context, in *AddAuthorBookRequest, opts ...client.CallOption) (*AddAuthorBookResponse, error)
	GetAuthorBook(ctx context.Context, in *GetAuthorBookRequest, opts ...client.CallOption) (*GetAuthorBookResponse, error)
	RemoveAuthorBook(ctx context.Context, in *RemoveAuthorBookRequest, opts ...client.CallOption) (*RemoveAuthorBookResponse, error)
}

type authorService struct {
	c    client.Client
	name string
}

func NewAuthorService(name string, c client.Client) AuthorService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.bookstore.srv.author"
	}
	return &authorService{
		c:    c,
		name: name,
	}
}

func (c *authorService) CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...client.CallOption) (*CreateAuthorResponse, error) {
	req := c.c.NewRequest(c.name, "Author.CreateAuthor", in)
	out := new(CreateAuthorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorService) GetAuthor(ctx context.Context, in *GetAuthorRequest, opts ...client.CallOption) (*GetAuthorResponse, error) {
	req := c.c.NewRequest(c.name, "Author.GetAuthor", in)
	out := new(GetAuthorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorService) GetAuthorByID(ctx context.Context, in *GetAuthorByIDRequest, opts ...client.CallOption) (*GetAuthorByIDResponse, error) {
	req := c.c.NewRequest(c.name, "Author.GetAuthorByID", in)
	out := new(GetAuthorByIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorService) UpdateAuthor(ctx context.Context, in *UpdateAuthorRequest, opts ...client.CallOption) (*UpdateAuthorResponse, error) {
	req := c.c.NewRequest(c.name, "Author.UpdateAuthor", in)
	out := new(UpdateAuthorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorService) DeleteAuthor(ctx context.Context, in *DeleteAuthorRequest, opts ...client.CallOption) (*DeleteAuthorResponse, error) {
	req := c.c.NewRequest(c.name, "Author.DeleteAuthor", in)
	out := new(DeleteAuthorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorService) AddAuthorBook(ctx context.Context, in *AddAuthorBookRequest, opts ...client.CallOption) (*AddAuthorBookResponse, error) {
	req := c.c.NewRequest(c.name, "Author.AddAuthorBook", in)
	out := new(AddAuthorBookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorService) GetAuthorBook(ctx context.Context, in *GetAuthorBookRequest, opts ...client.CallOption) (*GetAuthorBookResponse, error) {
	req := c.c.NewRequest(c.name, "Author.GetAuthorBook", in)
	out := new(GetAuthorBookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorService) RemoveAuthorBook(ctx context.Context, in *RemoveAuthorBookRequest, opts ...client.CallOption) (*RemoveAuthorBookResponse, error) {
	req := c.c.NewRequest(c.name, "Author.RemoveAuthorBook", in)
	out := new(RemoveAuthorBookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Author service

type AuthorHandler interface {
	CreateAuthor(context.Context, *CreateAuthorRequest, *CreateAuthorResponse) error
	GetAuthor(context.Context, *GetAuthorRequest, *GetAuthorResponse) error
	GetAuthorByID(context.Context, *GetAuthorByIDRequest, *GetAuthorByIDResponse) error
	UpdateAuthor(context.Context, *UpdateAuthorRequest, *UpdateAuthorResponse) error
	DeleteAuthor(context.Context, *DeleteAuthorRequest, *DeleteAuthorResponse) error
	AddAuthorBook(context.Context, *AddAuthorBookRequest, *AddAuthorBookResponse) error
	GetAuthorBook(context.Context, *GetAuthorBookRequest, *GetAuthorBookResponse) error
	RemoveAuthorBook(context.Context, *RemoveAuthorBookRequest, *RemoveAuthorBookResponse) error
}

func RegisterAuthorHandler(s server.Server, hdlr AuthorHandler, opts ...server.HandlerOption) error {
	type author interface {
		CreateAuthor(ctx context.Context, in *CreateAuthorRequest, out *CreateAuthorResponse) error
		GetAuthor(ctx context.Context, in *GetAuthorRequest, out *GetAuthorResponse) error
		GetAuthorByID(ctx context.Context, in *GetAuthorByIDRequest, out *GetAuthorByIDResponse) error
		UpdateAuthor(ctx context.Context, in *UpdateAuthorRequest, out *UpdateAuthorResponse) error
		DeleteAuthor(ctx context.Context, in *DeleteAuthorRequest, out *DeleteAuthorResponse) error
		AddAuthorBook(ctx context.Context, in *AddAuthorBookRequest, out *AddAuthorBookResponse) error
		GetAuthorBook(ctx context.Context, in *GetAuthorBookRequest, out *GetAuthorBookResponse) error
		RemoveAuthorBook(ctx context.Context, in *RemoveAuthorBookRequest, out *RemoveAuthorBookResponse) error
	}
	type Author struct {
		author
	}
	h := &authorHandler{hdlr}
	return s.Handle(s.NewHandler(&Author{h}, opts...))
}

type authorHandler struct {
	AuthorHandler
}

func (h *authorHandler) CreateAuthor(ctx context.Context, in *CreateAuthorRequest, out *CreateAuthorResponse) error {
	return h.AuthorHandler.CreateAuthor(ctx, in, out)
}

func (h *authorHandler) GetAuthor(ctx context.Context, in *GetAuthorRequest, out *GetAuthorResponse) error {
	return h.AuthorHandler.GetAuthor(ctx, in, out)
}

func (h *authorHandler) GetAuthorByID(ctx context.Context, in *GetAuthorByIDRequest, out *GetAuthorByIDResponse) error {
	return h.AuthorHandler.GetAuthorByID(ctx, in, out)
}

func (h *authorHandler) UpdateAuthor(ctx context.Context, in *UpdateAuthorRequest, out *UpdateAuthorResponse) error {
	return h.AuthorHandler.UpdateAuthor(ctx, in, out)
}

func (h *authorHandler) DeleteAuthor(ctx context.Context, in *DeleteAuthorRequest, out *DeleteAuthorResponse) error {
	return h.AuthorHandler.DeleteAuthor(ctx, in, out)
}

func (h *authorHandler) AddAuthorBook(ctx context.Context, in *AddAuthorBookRequest, out *AddAuthorBookResponse) error {
	return h.AuthorHandler.AddAuthorBook(ctx, in, out)
}

func (h *authorHandler) GetAuthorBook(ctx context.Context, in *GetAuthorBookRequest, out *GetAuthorBookResponse) error {
	return h.AuthorHandler.GetAuthorBook(ctx, in, out)
}

func (h *authorHandler) RemoveAuthorBook(ctx context.Context, in *RemoveAuthorBookRequest, out *RemoveAuthorBookResponse) error {
	return h.AuthorHandler.RemoveAuthorBook(ctx, in, out)
}
