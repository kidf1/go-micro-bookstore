// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/product/product.proto

/*
Package go_micro_bookstore_srv_product is a generated protocol buffer package.

It is generated from these files:
	proto/product/product.proto

It has these top-level messages:
	Book
	CreateBookRequest
	CreateBookResponse
	GetBookRequest
	GetBookResponse
	GetMultipleBookRequest
	GetMultipleBookResponse
	ListBookRequest
	ListBookResponse
	UpdateBookRequest
	UpdateBookResponse
	DeleteBookRequest
	DeleteBookResponse
	SearchBookRequest
	SearchBookResponse
*/
package go_micro_bookstore_srv_product

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Product service

type ProductService interface {
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...client.CallOption) (*CreateBookResponse, error)
	GetBook(ctx context.Context, in *GetBookRequest, opts ...client.CallOption) (*GetBookResponse, error)
	GetMultipleBook(ctx context.Context, in *GetMultipleBookRequest, opts ...client.CallOption) (*GetMultipleBookResponse, error)
	ListBook(ctx context.Context, in *ListBookRequest, opts ...client.CallOption) (*ListBookResponse, error)
	UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...client.CallOption) (*UpdateBookResponse, error)
	DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...client.CallOption) (*DeleteBookResponse, error)
	SearchBook(ctx context.Context, in *SearchBookRequest, opts ...client.CallOption) (*SearchBookResponse, error)
}

type productService struct {
	c    client.Client
	name string
}

func NewProductService(name string, c client.Client) ProductService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.bookstore.srv.product"
	}
	return &productService{
		c:    c,
		name: name,
	}
}

func (c *productService) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...client.CallOption) (*CreateBookResponse, error) {
	req := c.c.NewRequest(c.name, "Product.CreateBook", in)
	out := new(CreateBookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetBook(ctx context.Context, in *GetBookRequest, opts ...client.CallOption) (*GetBookResponse, error) {
	req := c.c.NewRequest(c.name, "Product.GetBook", in)
	out := new(GetBookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetMultipleBook(ctx context.Context, in *GetMultipleBookRequest, opts ...client.CallOption) (*GetMultipleBookResponse, error) {
	req := c.c.NewRequest(c.name, "Product.GetMultipleBook", in)
	out := new(GetMultipleBookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) ListBook(ctx context.Context, in *ListBookRequest, opts ...client.CallOption) (*ListBookResponse, error) {
	req := c.c.NewRequest(c.name, "Product.ListBook", in)
	out := new(ListBookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...client.CallOption) (*UpdateBookResponse, error) {
	req := c.c.NewRequest(c.name, "Product.UpdateBook", in)
	out := new(UpdateBookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) DeleteBook(ctx context.Context, in *DeleteBookRequest, opts ...client.CallOption) (*DeleteBookResponse, error) {
	req := c.c.NewRequest(c.name, "Product.DeleteBook", in)
	out := new(DeleteBookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) SearchBook(ctx context.Context, in *SearchBookRequest, opts ...client.CallOption) (*SearchBookResponse, error) {
	req := c.c.NewRequest(c.name, "Product.SearchBook", in)
	out := new(SearchBookResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Product service

type ProductHandler interface {
	CreateBook(context.Context, *CreateBookRequest, *CreateBookResponse) error
	GetBook(context.Context, *GetBookRequest, *GetBookResponse) error
	GetMultipleBook(context.Context, *GetMultipleBookRequest, *GetMultipleBookResponse) error
	ListBook(context.Context, *ListBookRequest, *ListBookResponse) error
	UpdateBook(context.Context, *UpdateBookRequest, *UpdateBookResponse) error
	DeleteBook(context.Context, *DeleteBookRequest, *DeleteBookResponse) error
	SearchBook(context.Context, *SearchBookRequest, *SearchBookResponse) error
}

func RegisterProductHandler(s server.Server, hdlr ProductHandler, opts ...server.HandlerOption) error {
	type product interface {
		CreateBook(ctx context.Context, in *CreateBookRequest, out *CreateBookResponse) error
		GetBook(ctx context.Context, in *GetBookRequest, out *GetBookResponse) error
		GetMultipleBook(ctx context.Context, in *GetMultipleBookRequest, out *GetMultipleBookResponse) error
		ListBook(ctx context.Context, in *ListBookRequest, out *ListBookResponse) error
		UpdateBook(ctx context.Context, in *UpdateBookRequest, out *UpdateBookResponse) error
		DeleteBook(ctx context.Context, in *DeleteBookRequest, out *DeleteBookResponse) error
		SearchBook(ctx context.Context, in *SearchBookRequest, out *SearchBookResponse) error
	}
	type Product struct {
		product
	}
	h := &productHandler{hdlr}
	return s.Handle(s.NewHandler(&Product{h}, opts...))
}

type productHandler struct {
	ProductHandler
}

func (h *productHandler) CreateBook(ctx context.Context, in *CreateBookRequest, out *CreateBookResponse) error {
	return h.ProductHandler.CreateBook(ctx, in, out)
}

func (h *productHandler) GetBook(ctx context.Context, in *GetBookRequest, out *GetBookResponse) error {
	return h.ProductHandler.GetBook(ctx, in, out)
}

func (h *productHandler) GetMultipleBook(ctx context.Context, in *GetMultipleBookRequest, out *GetMultipleBookResponse) error {
	return h.ProductHandler.GetMultipleBook(ctx, in, out)
}

func (h *productHandler) ListBook(ctx context.Context, in *ListBookRequest, out *ListBookResponse) error {
	return h.ProductHandler.ListBook(ctx, in, out)
}

func (h *productHandler) UpdateBook(ctx context.Context, in *UpdateBookRequest, out *UpdateBookResponse) error {
	return h.ProductHandler.UpdateBook(ctx, in, out)
}

func (h *productHandler) DeleteBook(ctx context.Context, in *DeleteBookRequest, out *DeleteBookResponse) error {
	return h.ProductHandler.DeleteBook(ctx, in, out)
}

func (h *productHandler) SearchBook(ctx context.Context, in *SearchBookRequest, out *SearchBookResponse) error {
	return h.ProductHandler.SearchBook(ctx, in, out)
}
