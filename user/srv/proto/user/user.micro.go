// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/user.proto

/*
Package go_micro_bookstore_srv_user is a generated protocol buffer package.

It is generated from these files:
	proto/user/user.proto

It has these top-level messages:
	Profile
	CreateProfileRequest
	CreateProfileResponse
	GetProfileRequest
	GetProfileResponse
	UpdateProfileRequest
	UpdateProfileResponse
	DeleteProfileRequest
	DeleteProfileResponse
	SearchProfileRequest
	SearchProfileResponse
*/
package go_micro_bookstore_srv_user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...client.CallOption) (*CreateProfileResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...client.CallOption) (*GetProfileResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...client.CallOption) (*UpdateProfileResponse, error)
	DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...client.CallOption) (*DeleteProfileResponse, error)
	SearchProfile(ctx context.Context, in *SearchProfileRequest, opts ...client.CallOption) (*SearchProfileResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.bookstore.srv.user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...client.CallOption) (*CreateProfileResponse, error) {
	req := c.c.NewRequest(c.name, "User.CreateProfile", in)
	out := new(CreateProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...client.CallOption) (*GetProfileResponse, error) {
	req := c.c.NewRequest(c.name, "User.GetProfile", in)
	out := new(GetProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...client.CallOption) (*UpdateProfileResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateProfile", in)
	out := new(UpdateProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...client.CallOption) (*DeleteProfileResponse, error) {
	req := c.c.NewRequest(c.name, "User.DeleteProfile", in)
	out := new(DeleteProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SearchProfile(ctx context.Context, in *SearchProfileRequest, opts ...client.CallOption) (*SearchProfileResponse, error) {
	req := c.c.NewRequest(c.name, "User.SearchProfile", in)
	out := new(SearchProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	CreateProfile(context.Context, *CreateProfileRequest, *CreateProfileResponse) error
	GetProfile(context.Context, *GetProfileRequest, *GetProfileResponse) error
	UpdateProfile(context.Context, *UpdateProfileRequest, *UpdateProfileResponse) error
	DeleteProfile(context.Context, *DeleteProfileRequest, *DeleteProfileResponse) error
	SearchProfile(context.Context, *SearchProfileRequest, *SearchProfileResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		CreateProfile(ctx context.Context, in *CreateProfileRequest, out *CreateProfileResponse) error
		GetProfile(ctx context.Context, in *GetProfileRequest, out *GetProfileResponse) error
		UpdateProfile(ctx context.Context, in *UpdateProfileRequest, out *UpdateProfileResponse) error
		DeleteProfile(ctx context.Context, in *DeleteProfileRequest, out *DeleteProfileResponse) error
		SearchProfile(ctx context.Context, in *SearchProfileRequest, out *SearchProfileResponse) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) CreateProfile(ctx context.Context, in *CreateProfileRequest, out *CreateProfileResponse) error {
	return h.UserHandler.CreateProfile(ctx, in, out)
}

func (h *userHandler) GetProfile(ctx context.Context, in *GetProfileRequest, out *GetProfileResponse) error {
	return h.UserHandler.GetProfile(ctx, in, out)
}

func (h *userHandler) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, out *UpdateProfileResponse) error {
	return h.UserHandler.UpdateProfile(ctx, in, out)
}

func (h *userHandler) DeleteProfile(ctx context.Context, in *DeleteProfileRequest, out *DeleteProfileResponse) error {
	return h.UserHandler.DeleteProfile(ctx, in, out)
}

func (h *userHandler) SearchProfile(ctx context.Context, in *SearchProfileRequest, out *SearchProfileResponse) error {
	return h.UserHandler.SearchProfile(ctx, in, out)
}
