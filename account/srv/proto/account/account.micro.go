// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/account/account.proto

/*
Package go_micro_bookstore_srv_account is a generated protocol buffer package.

It is generated from these files:
	proto/account/account.proto

It has these top-level messages:
	Credential
	CreateAccountRequest
	CreateAccountResponse
	GetAccountRequest
	GetAccountResponse
	UpdateAccountRequest
	UpdateAccountResponse
	DeleteAccountRequest
	DeleteAccountResponse
	LoginRequest
	LoginResponse
	LogoutRequest
	LogoutResponse
*/
package go_micro_bookstore_srv_account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/ahmadnurus/go-micro-bookstore/auth/srv/proto/auth"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Account service

type AccountService interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...client.CallOption) (*CreateAccountResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*GetAccountResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...client.CallOption) (*UpdateAccountResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...client.CallOption) (*DeleteAccountResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.bookstore.srv.account"
	}
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...client.CallOption) (*CreateAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Account.CreateAccount", in)
	out := new(CreateAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*GetAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Account.GetAccount", in)
	out := new(GetAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...client.CallOption) (*UpdateAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Account.UpdateAccount", in)
	out := new(UpdateAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...client.CallOption) (*DeleteAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Account.DeleteAccount", in)
	out := new(DeleteAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Account.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error) {
	req := c.c.NewRequest(c.name, "Account.Logout", in)
	out := new(LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountHandler interface {
	CreateAccount(context.Context, *CreateAccountRequest, *CreateAccountResponse) error
	GetAccount(context.Context, *GetAccountRequest, *GetAccountResponse) error
	UpdateAccount(context.Context, *UpdateAccountRequest, *UpdateAccountResponse) error
	DeleteAccount(context.Context, *DeleteAccountRequest, *DeleteAccountResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	Logout(context.Context, *LogoutRequest, *LogoutResponse) error
}

func RegisterAccountHandler(s server.Server, hdlr AccountHandler, opts ...server.HandlerOption) error {
	type account interface {
		CreateAccount(ctx context.Context, in *CreateAccountRequest, out *CreateAccountResponse) error
		GetAccount(ctx context.Context, in *GetAccountRequest, out *GetAccountResponse) error
		UpdateAccount(ctx context.Context, in *UpdateAccountRequest, out *UpdateAccountResponse) error
		DeleteAccount(ctx context.Context, in *DeleteAccountRequest, out *DeleteAccountResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error
	}
	type Account struct {
		account
	}
	h := &accountHandler{hdlr}
	return s.Handle(s.NewHandler(&Account{h}, opts...))
}

type accountHandler struct {
	AccountHandler
}

func (h *accountHandler) CreateAccount(ctx context.Context, in *CreateAccountRequest, out *CreateAccountResponse) error {
	return h.AccountHandler.CreateAccount(ctx, in, out)
}

func (h *accountHandler) GetAccount(ctx context.Context, in *GetAccountRequest, out *GetAccountResponse) error {
	return h.AccountHandler.GetAccount(ctx, in, out)
}

func (h *accountHandler) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, out *UpdateAccountResponse) error {
	return h.AccountHandler.UpdateAccount(ctx, in, out)
}

func (h *accountHandler) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, out *DeleteAccountResponse) error {
	return h.AccountHandler.DeleteAccount(ctx, in, out)
}

func (h *accountHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AccountHandler.Login(ctx, in, out)
}

func (h *accountHandler) Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error {
	return h.AccountHandler.Logout(ctx, in, out)
}
